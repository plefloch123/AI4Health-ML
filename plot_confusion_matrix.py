import numpy as np
import matplotlib.pyplot as plt
from utils import decision_tree_learning, confusion_matrix, cross_validate_and_evaluate

def plot_confusion_matrix(matrix, title='Confusion Matrix'):
    """Plot a confusion matrix as a heatmap."""
    plt.figure(figsize=(8, 6))
    plt.imshow(matrix, interpolation='nearest', cmap=plt.cm.Blues)
    plt.title(title)
    plt.colorbar()
    
    tick_marks = np.arange(matrix.shape[0])
    plt.xticks(tick_marks, np.arange(1, matrix.shape[0] + 1))  # Classes start from 1
    plt.yticks(tick_marks, np.arange(1, matrix.shape[0] + 1))
    
    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    
    # Add text annotations
    thresh = matrix.max() / 2.  # Threshold for color
    for i, j in np.ndindex(matrix.shape):
        plt.text(j, i, format(matrix[i, j], 'd'),
                 horizontalalignment='center',
                 color='white' if matrix[i, j] > thresh else 'black')

    plt.tight_layout()
    plt.show()

# Example usage with the generated decision tree
# Assuming 'tree' is the tree generated by `decision_tree_learning`

if __name__ == "__main__":
    # Example usage with a specific seed
    seed = 42  # Choose your seed for reproducibility

    # Load the clean and noisy datasets
    clean_data = np.loadtxt('wifi_db/clean_dataset.txt')
    noisy_data = np.loadtxt('wifi_db/noisy_dataset.txt')

    # Cross-validate and evaluate the clean and noisy datasets
    true_labels_clean, predictions_clean = cross_validate_and_evaluate(clean_data, seed=seed)
    true_labels_noisy, predictions_noisy = cross_validate_and_evaluate(noisy_data, seed=seed)

    # Calculate the confusion matrices
    num_classes = np.max(np.unique(true_labels_clean))
    conf_matrix_noisy = confusion_matrix(true_labels_noisy, predictions_noisy, num_classes)
    conf_matrix_clean = confusion_matrix(true_labels_clean, predictions_clean, num_classes)

    plot_confusion_matrix(conf_matrix_clean, title='Confusion Matrix (Clean Data)')
    plot_confusion_matrix(conf_matrix_noisy, title='Confusion Matrix (Noisy Data)')